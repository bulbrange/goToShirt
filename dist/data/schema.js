'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _templateObject = _taggedTemplateLiteral(['\n  # declare custom scalars\n  scalar Date\n  # a user -- keep type really simple for now\n  input CreateTextureInput {\n    source: String!\n    posX: Int!\n    posY: Int!\n    renderSize: Int!\n    backgroundColor: String!\n    tintColor: String\n    face: String!\n    tshirtId: Int!\n    rotate: String!\n    text: String!\n  }\n  type User {\n    id: Int! # unique id for the user\n    email: String! # we will also require a unique email per user\n    username: String! # this is the name we\'ll show other users\n    phone: String!\n    groups: [Group!]\n  }\n  type Group {\n    id: Int!\n    name: String!\n    image: String!\n    users: [User!]!\n    messages: [MessageGroup!]!\n  }\n  type Tshirt {\n    id: Int!\n    userId: Int!\n    name: String!\n    color: String!\n    texture: [TshirtTextures]!\n    updatedAt: Date!\n  }\n\n  type MessageGroup {\n    id: Int!\n    userId: Int!\n    groupId: Int!\n    text: String!\n  }\n\n  type TshirtTextures {\n    id: Int!\n    source: String!\n    posX: Int!\n    posY: Int!\n    renderSize: Int!\n    backgroundColor: String!\n    tintColor: String\n    face: String!\n    tshirtId: Int!\n    rotate: String!\n    text: String!\n  }\n\n  # query for types\n  type Query {\n    userByEmail(email: String!): User\n    user(email: String!, password: String!): User\n    users: [User]\n    group(id: Int!): Group\n    # userGroups(userId: Int!): [Group]\n    groups: [Group]\n    tshirt(id: Int!): Tshirt\n    tshirts(userId: Int!): [Tshirt]\n    messages(userId: Int!, groupId: Int!): MessageGroup\n    tshirtTextures(id: Int!): TshirtTextures\n    textures(tshirtId: Int!): [TshirtTextures]\n  }\n  type Mutation {\n    addNewUser(email: String!, username: String!, password: String!): User\n    updateUserEmail(id: Int!, email: String!): User\n    delUser(id: Int!): User\n    addNewShirt(userId: Int!, name: String!, color: String!): Tshirt\n    addTexture(texture: CreateTextureInput!): TshirtTextures\n    cleanShirtTextures(tshirtId: Int!): Tshirt\n    updateShirtName(tshirtId: Int!, name: String!): Tshirt\n    updateShirtColor(tshirtId: Int!, color: String!): Tshirt\n    removeShirt(tshirtId: Int!): Tshirt\n  }\n  schema {\n    query: Query\n    mutation: Mutation\n  }\n'], ['\n  # declare custom scalars\n  scalar Date\n  # a user -- keep type really simple for now\n  input CreateTextureInput {\n    source: String!\n    posX: Int!\n    posY: Int!\n    renderSize: Int!\n    backgroundColor: String!\n    tintColor: String\n    face: String!\n    tshirtId: Int!\n    rotate: String!\n    text: String!\n  }\n  type User {\n    id: Int! # unique id for the user\n    email: String! # we will also require a unique email per user\n    username: String! # this is the name we\'ll show other users\n    phone: String!\n    groups: [Group!]\n  }\n  type Group {\n    id: Int!\n    name: String!\n    image: String!\n    users: [User!]!\n    messages: [MessageGroup!]!\n  }\n  type Tshirt {\n    id: Int!\n    userId: Int!\n    name: String!\n    color: String!\n    texture: [TshirtTextures]!\n    updatedAt: Date!\n  }\n\n  type MessageGroup {\n    id: Int!\n    userId: Int!\n    groupId: Int!\n    text: String!\n  }\n\n  type TshirtTextures {\n    id: Int!\n    source: String!\n    posX: Int!\n    posY: Int!\n    renderSize: Int!\n    backgroundColor: String!\n    tintColor: String\n    face: String!\n    tshirtId: Int!\n    rotate: String!\n    text: String!\n  }\n\n  # query for types\n  type Query {\n    userByEmail(email: String!): User\n    user(email: String!, password: String!): User\n    users: [User]\n    group(id: Int!): Group\n    # userGroups(userId: Int!): [Group]\n    groups: [Group]\n    tshirt(id: Int!): Tshirt\n    tshirts(userId: Int!): [Tshirt]\n    messages(userId: Int!, groupId: Int!): MessageGroup\n    tshirtTextures(id: Int!): TshirtTextures\n    textures(tshirtId: Int!): [TshirtTextures]\n  }\n  type Mutation {\n    addNewUser(email: String!, username: String!, password: String!): User\n    updateUserEmail(id: Int!, email: String!): User\n    delUser(id: Int!): User\n    addNewShirt(userId: Int!, name: String!, color: String!): Tshirt\n    addTexture(texture: CreateTextureInput!): TshirtTextures\n    cleanShirtTextures(tshirtId: Int!): Tshirt\n    updateShirtName(tshirtId: Int!, name: String!): Tshirt\n    updateShirtColor(tshirtId: Int!, color: String!): Tshirt\n    removeShirt(tshirtId: Int!): Tshirt\n  }\n  schema {\n    query: Query\n    mutation: Mutation\n  }\n']);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var _require = require('apollo-server'),
    gql = _require.gql;

var typeDefs = exports.typeDefs = gql(_templateObject);

exports.default = typeDefs;